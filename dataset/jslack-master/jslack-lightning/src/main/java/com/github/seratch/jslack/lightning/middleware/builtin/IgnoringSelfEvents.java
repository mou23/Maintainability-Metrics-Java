package com.github.seratch.jslack.lightning.middleware.builtin;

import com.github.seratch.jslack.api.methods.MethodsClient;
import com.github.seratch.jslack.api.methods.SlackApiException;
import com.github.seratch.jslack.api.methods.response.bots.BotsInfoResponse;
import com.github.seratch.jslack.api.model.event.MemberJoinedChannelEvent;
import com.github.seratch.jslack.api.model.event.MemberLeftChannelEvent;
import com.github.seratch.jslack.common.json.GsonFactory;
import com.github.seratch.jslack.lightning.middleware.Middleware;
import com.github.seratch.jslack.lightning.middleware.MiddlewareChain;
import com.github.seratch.jslack.lightning.request.Request;
import com.github.seratch.jslack.lightning.request.RequestType;
import com.github.seratch.jslack.lightning.request.builtin.EventRequest;
import com.github.seratch.jslack.lightning.response.Response;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

@Slf4j
public class IgnoringSelfEvents implements Middleware {

    private Gson gson = GsonFactory.createSnakeCase();

    // cached bot_id <> bot_user_id mapping
    private ConcurrentMap<String, String> botIdToBotUserId = new ConcurrentHashMap<>();

    private List<String> eventTypesNotToMiss = new ArrayList<>();

    {
        eventTypesNotToMiss.add(MemberJoinedChannelEvent.TYPE_NAME);
        eventTypesNotToMiss.add(MemberLeftChannelEvent.TYPE_NAME);
    }

    public List<String> getEventTypesNotToMiss() {
        return eventTypesNotToMiss;
    }

    public void setEventTypesNotToMiss(List<String> eventTypesNotToMiss) {
        this.eventTypesNotToMiss = eventTypesNotToMiss;
    }

    @Override
    public Response apply(Request req, Response resp, MiddlewareChain chain) throws Exception {
        if (req.getRequestType() == RequestType.Event) {
            String appBotUserId = req.getContext().getBotUserId();
            if (appBotUserId == null) {
                return chain.next(req);
            }

            EventRequest eventRequest = (EventRequest) req;
            String eventType = eventRequest.getEventType();
            if (eventType == null || eventTypesNotToMiss.contains(eventType)) {
                return chain.next(req);
            }

            JsonObject eventElem = extractEventElem(eventRequest.getRequestBodyAsString());
            if (eventElem != null) {
                JsonElement eventUserIdElem = eventElem.get("user");
                String eventBotUserId = eventUserIdElem != null ? eventUserIdElem.getAsString() : null;
                JsonElement botIdElem = eventElem.get("bot_id");
                if (eventBotUserId == null && botIdElem != null) {
                    String botId = botIdElem.getAsString();
                    eventBotUserId = findAndSaveBotUserId(req.getContext().client(), botId);
                }
                if (eventBotUserId != null && eventBotUserId.equals(appBotUserId)) {
                    log.debug("Skipped the event (type: {}) as it was generated by this app's bot user", eventType);
                    return resp;
                }
            }
        }
        return chain.next(req);
    }

    private JsonObject extractEventElem(String requestBody) {
        JsonElement payload = gson.fromJson(requestBody, JsonElement.class);
        return payload.getAsJsonObject().getAsJsonObject("event");
    }

    private String findAndSaveBotUserId(MethodsClient client, String botId) throws IOException, SlackApiException {
        String botUserId = botIdToBotUserId.get(botId);
        if (botUserId != null) {
            return botUserId;
        } else {
            BotsInfoResponse botInfo = client.botsInfo(r -> r.bot(botId));
            if (botInfo.isOk()) {
                botUserId = botInfo.getBot().getUserId();
                if (botUserId != null) {
                    botIdToBotUserId.put(botId, botUserId);
                }
                return botUserId;
            } else {
                return null;
            }
        }
    }

}
